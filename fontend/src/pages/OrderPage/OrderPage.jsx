import React, { useState } from "react";
import {
  Table,
  Button,
  Typography,
  Modal,
  message,
  Form,
  Input,
  Divider,
} from "antd";
import { useNavigate } from "react-router-dom";
import { useCart } from "../../context/CartContext";
import { useAuth } from "../../context/AuthContext";
import { validateCoupon } from "../../api/couponAPI";
import axios from "axios";

const { Title } = Typography;

const OrderPage = () => {
  const [coupon, setCoupon] = useState(null);
  const [discountAmount, setDiscountAmount] = useState(0);
  const [couponCodeInput, setCouponCodeInput] = useState("");

  const { cartItems, removeFromCart, clearCart } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();

  // ‚úÖ H√†m t√≠nh gi√° hi·ªáu l·ª±c (flash sale n·∫øu c√≥)
  const getEffectivePrice = (item) => {
    const now = new Date();
    const isFlashSaleActive =
      item.flashSale?.isActive &&
      new Date(item.flashSale.startTime) <= now &&
      new Date(item.flashSale.endTime) >= now;

    return isFlashSaleActive ? Number(item.flashSale.price) : Number(item.price);
  };

  // ‚úÖ T√≠nh t·ªïng
  const totalPrice = cartItems.reduce(
    (sum, item) => sum + getEffectivePrice(item) * item.quantity,
    0
  );
  const finalPrice = totalPrice - discountAmount;

  const columns = [
    { title: "S·∫£n ph·∫©m", dataIndex: "name", key: "name" },
    {
      title: "Gi√°",
      key: "price",
      render: (_, record) => `${getEffectivePrice(record).toLocaleString()}‚Ç´`,
    },
    { title: "S·ªë l∆∞·ª£ng", dataIndex: "quantity", key: "quantity" },
    {
      title: "T·ªïng",
      key: "total",
      render: (_, record) =>
        `${(getEffectivePrice(record) * record.quantity).toLocaleString()}‚Ç´`,
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Button danger onClick={() => removeFromCart(record.id)}>
          Xo√°
        </Button>
      ),
    },
  ];

  const handleBack = () => {
    Modal.confirm({
      title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r·ªùi kh·ªèi trang?",
      content: "Gi·ªè h√†ng s·∫Ω b·ªã x√≥a n·∫øu b·∫°n quay l·∫°i.",
      okText: "ƒê·ªìng √Ω",
      cancelText: "H·ªßy",
      onOk: () => {
        clearCart();
        navigate(-1);
      },
    });
  };

  const handleApplyCoupon = async () => {
    try {
      const res = await validateCoupon(
        {
          code: couponCodeInput,
          orderTotal: totalPrice,
        },
        user.token
      );

      setCoupon(res.coupon);

      let discount = 0;
      if (res.coupon.discountType === "percent") {
        discount = (totalPrice * res.coupon.discountValue) / 100;
      } else if (res.coupon.discountType === "fixed") {
        discount = res.coupon.discountValue;
      }

      setDiscountAmount(discount);
      message.success("üéâ M√£ gi·∫£m gi√° ƒë√£ √°p d·ª•ng!");
    } catch (err) {
      setCoupon(null);
      setDiscountAmount(0);
      message.error(err?.response?.data?.error || "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá");
    }
  };

  const handlePay = async () => {
    try {
      const values = await form.validateFields();
      if (!user?.token) {
        return Modal.error({
          title: "L·ªói x√°c th·ª±c",
          content: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
        });
      }

      setLoading(true);

      await axios.post(
        "/api/orders",
        {
          orderItems: cartItems.map((item) => ({
            product: item.id,
            name: item.name,
            quantity: item.quantity,
            price: getEffectivePrice(item),
            image: item.image,
          })),
          shippingAddress: values,
          couponCode: coupon?.code || null,
        },
        {
          headers: {
            Authorization: `Bearer ${user.token}`,
          },
        }
      );

      Modal.success({
        title: "Thanh to√°n th√†nh c√¥ng!",
        content: "C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng.",
        onOk: () => {
          clearCart();
          navigate("/");
        },
      });
    } catch (err) {
      console.error("‚ùå L·ªói thanh to√°n:", err);
      message.error("Thanh to√°n th·∫•t b·∫°i");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: "30px 50px" }}>
      <Title level={3}>ƒê∆°n h√†ng c·ªßa b·∫°n</Title>

      <Button type="default" onClick={handleBack} style={{ marginBottom: 20 }}>
        ‚Üê Quay l·∫°i
      </Button>

      <Table
        dataSource={cartItems}
        columns={columns}
        rowKey="id"
        pagination={false}
      />

      <Divider />

      <Title level={4}>Th√¥ng tin giao h√†ng</Title>
      <Form
        form={form}
        layout="vertical"
        style={{ maxWidth: 600, marginBottom: 24 }}
      >
        <Form.Item
          label="H·ªç v√† t√™n"
          name="fullName"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n" }]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label="S·ªë ƒëi·ªán tho·∫°i"
          name="phone"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" }]}
        >
          <Input />
        </Form.Item>
        <Form.Item
          label="ƒê·ªãa ch·ªâ"
          name="address"
          rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ" }]}
        >
          <Input />
        </Form.Item>
        <Form.Item label="Th√†nh ph·ªë" name="city">
          <Input />
        </Form.Item>
        <Form.Item label="Qu·∫≠n / Huy·ªán" name="district">
          <Input />
        </Form.Item>
        <Form.Item label="M√£ b∆∞u ƒëi·ªán" name="postalCode">
          <Input />
        </Form.Item>
      </Form>

      <div style={{ marginTop: 20, textAlign: "right" }}>
        <Title level={4}>T·ªïng ti·ªÅn: {totalPrice.toLocaleString()}‚Ç´</Title>

        {coupon && discountAmount > 0 && (
          <Title level={4} type="success">
            T·ªïng sau gi·∫£m: {finalPrice.toLocaleString()}‚Ç´
          </Title>
        )}

        <div style={{ marginBottom: 16 }}>
          <Input
            placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
            value={couponCodeInput}
            onChange={(e) => setCouponCodeInput(e.target.value)}
            style={{ width: 200, marginRight: 8 }}
          />
          <Button onClick={handleApplyCoupon}>√Åp d·ª•ng</Button>

          {coupon && (
            <div style={{ color: "green", marginTop: 8 }}>
              ‚úî ƒê√£ √°p d·ª•ng m√£ <strong>{coupon.code}</strong> -{" "}
              {coupon.discountType === "percent"
                ? `${coupon.discountValue}%`
                : `-${coupon.discountValue.toLocaleString()}‚Ç´`}
            </div>
          )}
        </div>

        <Button type="primary" loading={loading} onClick={handlePay}>
          Thanh to√°n ngay
        </Button>
      </div>
    </div>
  );
};

export default OrderPage;

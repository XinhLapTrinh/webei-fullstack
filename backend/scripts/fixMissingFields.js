// updateBrandField.js
require("dotenv").config();
const mongoose = require('mongoose');

const MONGO_URI = process.env.MONGO_URI
// üîê Thay th·∫ø b·∫±ng chu·ªói k·∫øt n·ªëi MongoDB Atlas c·ªßa b·∫°n


// K·∫øt n·ªëi MongoDB
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => {
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    updateProducts();
  })
  .catch((err) => {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
  });

// ƒê·ªãnh nghƒ©a schema t·∫°m th·ªùi
const productSchema = new mongoose.Schema({}, { strict: false });
const Product = mongoose.model('Product', productSchema, 'products'); // üëà d√πng collection 'products'

async function updateProducts() {
  try {
    const result = await Product.updateMany(
      { brand: { $exists: false } },            // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch∆∞a c√≥ tr∆∞·ªùng brand
      { $set: { brand: 'Ch∆∞a x√°c ƒë·ªãnh' } }      // B·∫°n c√≥ th·ªÉ ƒë·ªïi th√†nh 'Apple', 'Samsung', v.v.
    );

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} s·∫£n ph·∫©m.`);
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:', error);
  } finally {
    mongoose.disconnect();
  }
}
